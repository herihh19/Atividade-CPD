#ATIVIDADE INSERÇÃO CLASSIFICAÇÃO E PESQUISA DE DADOS



def insertion_sort(data):
    for j in range(1, len(data)):
        for i in range(j, 0, -1):
            if data[i] < data[i - 1]:
                data[i], data[i - 1] = data[i - 1], data[i]
            else:
                break
def teste():
    testes = {
        "ordenados": [1, 2, 3, 4, 5],
        "invertidos": [5, 4, 3, 2, 1],
        "duplicados": [2, 3, 1, 4, 2, 1, 5],
        "sem repetição": [3, 1, 4, 2, 5]
    }
    for name, data in testes.items():
        insertion_sort(data)
        print(f"{name}: {data}")
teste()

#encadeada
class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def prepend(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.value, end=" -> ")
            current = current.next
        print("None")

    def delete_value(self, value):
        if self.head is None:
            return
        
        if self.head.value == value:
            self.head = self.head.next
            return
        
        current = self.head
        while current.next and current.next.value != value:
            current = current.next
        
        if current.next:
            current.next = current.next.next

def test_linked_list():
    ll = LinkedList()
    ll.append(1)
    ll.append(2)
    ll.append(3)
    ll.prepend(0)
    
    print("Lista após inserções:")
    ll.print_list()
    
    ll.delete_value(2)
    print("Lista após deletar 2:")
    ll.print_list()
    
test_linked_list()
